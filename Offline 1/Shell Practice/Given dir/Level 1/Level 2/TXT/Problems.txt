Good Day to you!

I've been asked to make some topic-wise list of problems I've solved. Even though I couldn't involve all problems, I've tried to involve at least "few" problems at each topic I thought up (I'm sorry if I forgot about something "easy"). I've alredy made such list once anyway I've tried to include more problems now &mdash; so here it is:

<spoiler summary="aho">

http://www.spoj.com/problems/ADAJOBS/

URI 2226 (5) //[NICE][NUMBERS][DP]

http://www.spoj.com/problems/SUB_PROB/en/

http://codeforces.com/contest/696/problem/D 8

http://www.spoj.com/problems/AHOCUR/ 5 //Aho-Corassic + DP

https://www.codechef.com/problems/LYRC (5) //Sample aho-brute-force

http://codeforces.com/problemset/problem/346/B //Proposed by [user:bradyawn]

</spoiler>

<spoiler summary="automat">

6861 [LA] //CYK

UVA	10679 //Suffix Automat

http://www.spoj.com/problems/STRMATCH/ //Suffix Automat  &mdash; trie might do too

http://www.spoj.com/problems/NSUBSTR2/ //Suffix Automaton

</spoiler>

<spoiler summary="belman-ford">

UVA	12519

http://www.spoj.com/problems/ARBITRAG/ (4) //Or Floyd-Warshall

</spoiler>

<spoiler summary="bfs">

http://www.spoj.com/problems/ADACYCLE/ [FW]

UVA 13295 (6) //[NICE][EFFICIENCY][IMPLEMENTATION]

http://codeforces.com/gym/101992/problem/H (4) //[VERY NICE][MAX]

http://codeforces.com/gym/100112 [H] (3)

6151 - Beehives (4) //[NICE] //Search for shortest cycle

https://devskill.com/CodingProblems/ViewProblem/60

https://devskill.com/CodingProblems/ViewProblem/150

11312 UVA (3)

11392 UVA (4)

http://codeforces.com/contest/653/problem/E (6)

http://codeforces.com/contest/769/problem/C 5 //FL:ODD/**** | bfs+greed NICE

10968 UVA (3) //EASY + NICE (bfs withot <=2 nodes)

http://codeforces.com/contest/796/problem/D (3) //NICE+EASY ... print visited in bfs (not par)

10888 UVA (4) //VERY NICE &mdash; but not main technique ... ++ DP /or/ MCMF

http://codeforces.com/contest/821/problem/D (5) //VERY NICE &mdash; Consider only points not GRID

http://www.spoj.com/problems/DIGOKEYS/ (4) //Easy [Nice problem &mdash; weird statement]

http://www.spoj.com/problems/SPIKES/ (3) //Easy bfs (# of 's' * 2)

http://www.spoj.com/problems/MULTII/ (4) //VERY NICE: BFS over numbers (K*10+d)%N

http://www.spoj.com/problems/ADV04F1/ (5) //VERY NICE: [imple] ~ N^4*BigConstant

http://www.spoj.com/problems/INVESORT/ (5) //Big limit (really usefull :P)

http://codeforces.com/contest/59/problem/E (5) //[NICE][DOUBLE-STATES][SET]

http://codeforces.com/contest/877/problem/D (4) //[NICE] Add vector to # of states

</spoiler>

<spoiler summary="bfs-grid">

4291 - Sculpture (6) //[NICE][PREPROCESS][NORMALIZE]

10977 UVA (3)

928 UVA (3)

13116 UVA (4)

314 UVA (3)

11487 UVA (4)

5622 LA (7)

11931 UVA (5)

http://www.spoj.com/problems/KNMOVE/ 3 //simple knights

http://www.spoj.com/problems/SERGRID/ 3 //almost classical

http://www.spoj.com/problems/NAKANJ/ 3 //Classical chess &mdash; KNIGHT

http://www.spoj.com/problems/PUCMM223/ (4) //NICE (but not many languages) &mdash; 2 moving [x][y]

http://www.spoj.com/problems/SPIRALGR/ (4) //NICE (not typical) [SIEVE]

http://www.spoj.com/problems/DCEPC706/ (4) //NICE &mdash; travelling outside

http://codeforces.com/contest/35/problem/C (3) //No obstacles [multiple starts]

</spoiler>

<spoiler summary="big">

https://devskill.com/CodingProblems/ViewProblem/394 (2) //Multiplication (or math)

http://codeforces.com/contest/66/problem/A (2) //Big + iffs + implementation

UVA &mdash; 10183 

10106 &mdash; Product [UVA]

10523 &mdash; Very Easy !!! [UVA]

787 &mdash; Maximum Sub-sequence Product [UVA]

2871 &mdash; Rhyme Schemes [LA][BELL]

UVA &mdash; 10497

http://www.spoj.com/problems/MUL/en/

http://www.spoj.com/problems/ITRIX_E/

11115 &mdash; Uncle Jack

11448 &mdash; Who said crisis? [UVA]

http://www.spoj.com/problems/GCD2/

10083 &mdash; Division [UVA]

11830 &mdash; Contract Revision [UVA]

1230 &mdash; MODEX [UVA]

http://www.spoj.com/problems/NUMPLAY/

10519 &mdash; UVA

7651 &mdash; Pascal's Hyper-Pyramids [LA]

11344 &mdash; The Huge One [UVA]

10303 &mdash; How Many Trees? [UVA]

http://www.spoj.com/problems/FAST2/

495 &mdash; Fibonacci Freeze [UVA]

10023 &mdash; Square root [UVA]

http://www.spoj.com/problems/SKYLINE/

http://www.spoj.com/problems/NITT2/

11879 &mdash; Multiple of 17

http://www.spoj.com/problems/MINNUM/

10494 &mdash; If We Were a Child Again [UVA]

10013 &mdash; Super long sums [UVA]

10925 &mdash; Krakovia [UVA]

10814 &mdash; Simplifying Fractions [UVA]

619 &mdash; Numerically Speaking [UVA]

713 &mdash; Adding Reversed Numbers [UVA]

1226 &mdash; Numerical surprises [UVA]

623 &mdash; 500! [UVA]

http://codeforces.com/problemset/problem/18/D

http://www.spoj.com/problems/NUMTSN/

https://www.codechef.com/problems/FRJUMP

10220 &mdash; I Love Big Numbers ! [UVA]

https://www.hackerrank.com/contests/projecteuler/challenges/euler025

https://www.hackerrank.com/contests/projecteuler/challenges/euler020

11645 UVA 4

Gym &mdash; 100866A [ACM ICPC 2005–2006 NEERC Moscow Subregional Contest]

CSQUARE [SPOJ]

http://www.spoj.com/problems/PARCARD1/

10070 &mdash; Leap Year or Not Leap Year and .. [UVA]

http://www.spoj.com/problems/SOLDIERS/

12333 &mdash; Revenge of Fibonacci [UVA]

http://www.spoj.com/problems/NDIVPHI/

http://www.spoj.com/problems/IWGBS/ [UVA]

http://www.spoj.com/problems/POP3/ [Prime-Test]

http://www.spoj.com/problems/VGCD/

http://www.spoj.com/problems/NDIVPHI2/

12924 &mdash; Immortal Rabbits [UVA]

Count the Trees  [UVA][10007]

10198 &mdash; Counting [UVA]

11375 UVA 3

http://www.spoj.com/problems/MINNUM/ 3 // BIG/9+!!(BIG%9)

10844 UVA 4 //Bell numbers + big (might be slightly slow!)

http://www.spoj.com/problems/NITT2/ 2 //Divisibility by two constants

http://www.spoj.com/problems/NUMPLAY/ (3) //With DP

http://www.spoj.com/problems/IWGBS/ (3) //Fibonacci 10^4

http://www.spoj.com/problems/PUCMM025/ (2) //Divisibility by 1 → 9

http://www.spoj.com/problems/CSQUARE/ (3) //Converse + Power 

http://codeforces.com/contest/17/problem/D (5) //B^(N-1)*(B-1)%C [B/N are big]

</spoiler>

<spoiler summary="binary_search">

https://codeforces.com/contest/1169/problem/C (3) //[NICE]

https://codeforces.com/contest/1173/problem/C (4) //[NICE]

https://codeforces.com/contest/1201/problem/C (4) //[NICE][SIMPLE]

https://codeforces.com/contest/1183/problem/C (3) //[SIMPLE][NICE]

http://codeforces.com/gym/101628/problem/J (4) //[NICE][EASY]

http://codeforces.com/gym/101962 [F] (5) //[NICE][FW]

http://codeforces.com/contest/920/problem/G (5) //[NICE][MATH][IE]

http://codeforces.com/contest/140/problem/C (4) //[NICE][GREEDY]

http://codeforces.com/contest/898/problem/E (4) //[NICE][SIMPLE][PREPROCESS]

http://codeforces.com/contest/888/problem/C (3) //Can be done without BS

http://codeforces.com/contest/68/problem/B (3) //[EASY][DOUBLE]

http://codeforces.com/contest/42/problem/A (2) //Or simple math

http://codeforces.com/contest/883/problem/I (4) //[NICE][SET][2Pointers]

http://codeforces.com/contest/51/problem/C (4) //[NICE][GREEDY-CHECK]

http://codeforces.com/contest/729/problem/C 3

http://codeforces.com/contest/714/problem/D 8

13150 (UVA) 4

http://codeforces.com/contest/749/problem/D 5

11692 (UVA) 4

11516 (UVA) 3

http://codeforces.com/contest/760/problem/B 3

http://codeforces.com/contest/675/problem/D 4 //dunno &mdash; solvable with treap

http://www.spoj.com/problems/NDS/ 4 //BS over LIS

http://www.spoj.com/problems/VECTAR4/ 3

http://codeforces.com/contest/767/problem/D 4 //NICE

http://codeforces.com/contest/627/problem/D (7) //with dp &mdash; NICE

http://codeforces.com/contest/779/problem/D (3) //NICE + EASY

http://www.spoj.com/problems/CNTINDX/ (4) //Map+BS === OK

13177 UVA (3) //BS over answer == OK

http://codeforces.com/contest/801/problem/C (3) //BS + SUM -EASY

http://codeforces.com/contest/803/problem/D (3) //BS by answer

http://codeforces.com/contest/807/problem/C (3) //Or math

http://codeforces.com/contest/818/problem/F (4) //NICE &mdash; Live VS Clique

http://codeforces.com/contest/845/problem/E (5) //VERY NICE &mdash; min(X,Y) .. add time, repeat

http://www.spoj.com/problems/MATHLOVE/ (2) //BS + Gaus (or otter ways)

http://www.spoj.com/problems/SABBIRGAME/ (3) //Binary search over answer ::max(0,ANS)

http://codeforces.com/contest/846/problem/D (4) //BS+Precalculation OR 2D-RMQ

http://www.spoj.com/problems/RPLC/ (3) //Classical

http://www.spoj.com/problems/TRIGALGE/ (2) //On doubles &mdash; simple function given

http://www.spoj.com/problems/ABA12E/ (4) //VERY NICE &mdash; BS on answer + 2Pointers

http://codeforces.com/contest/847/problem/E (4) //NICE: Back+Front OR Front+Back

http://www.spoj.com/problems/MAIN8_C/ (3) //Classical &mdash; simultion over array

http://www.spoj.com/problems/FUNFACT/ (4) //VERY NICE &mdash; Sterling Approximation

http://codeforces.com/contest/16/problem/C (3) //[or math][simple formula check]

http://codeforces.com/contest/21/problem/C (3) //[NICE][prefix-sum+lower_bound]

http://codeforces.com/contest/24/problem/E (5) //[doubles]

http://codeforces.com/contest/875/problem/E (6) //VERY NICE [BS][Keep possible places]

</spoiler>

<spoiler summary="bits">

https://codeforces.com/contest/1204/problem/A (2) //[POWERS]

https://codeforces.com/contest/1148/problem/F (6) //[VERY NICE][INDUCTION][CONSTRUCTIVE]

https://devskill.com/CodingProblems/ViewProblem/566 (2)

https://codeforces.com/gym/102006/problem/F (6) //[VERY NICE][DP]

http://codeforces.com/gym/101908/problem/I (3) //[EASY][XOR]

http://codeforces.com/contest/879/problem/C (3) //[NICE] one of each operation is enough

http://codeforces.com/contest/92/problem/B (2) //Bit addition/shifting (but big number)

http://codeforces.com/contest/907/problem/C (3) //Nice but ugly statement: sets

11659 UVA (4)

11535 UVA (4)

http://codeforces.com/contest/779/problem/E (5) //NICE + Parsing

http://www.spoj.com/problems/EC_CONB/ (1) //reverse numbers

http://codeforces.com/contest/769/problem/D (4) //freq + brute-force

http://www.spoj.com/problems/HAP01/ (2) //builtin_popcount

http://codeforces.com/contest/862/problem/C (3) //VERY NICE &mdash; Random works well

http://www.spoj.com/problems/KOMPICI/ (4) //NICE &mdash; Bitmask over digits

</spoiler>

<spoiler summary="bitset">

http://www.spoj.com/problems/ADACOINS/

http://www.spoj.com/problems/ADACHERY/

http://www.spoj.com/problems/ADAFUROW/

https://codeforces.com/contest/1194/problem/E (5) //[NICE][BRUTE]

https://www.spoj.com/problems/TTRGRAPH/ (4) //[NICE][GRAPH][CLIQUES]

https://www.spoj.com/problems/ILD18ACP/ (5) //[NICE][GRAPH][PATH]

http://codeforces.com/contest/914/problem/F (7) //[VERY NICE][POLYMUL-LIKE][BRUTE]

http://codeforces.com/contest/117/problem/C (5) //Finding 3cycles in directed graph [NICE]

http://codeforces.com/contest/754/problem/E 6

http://www.spoj.com/problems/UCBINTC/ 5 //polymul with bitset

http://codeforces.com/contest/33/problem/D (4) //VERY NICE [LCA works too]

http://codeforces.com/contest/918/problem/C (4) //Brute-force+Bitset (or...)

</spoiler>

<spoiler summary="bridges">

http://codeforces.com/contest/118/problem/E (4) //[NICE]//Orientation [+DFS]

315 &mdash; Network

796 &mdash; Critical Links

UVA	12363

Gym	100114J [2012-2013 ACM-ICPC, NEERC, Central Subregional Contest]

http://www.spoj.com/problems/ONBRIDGE/ [ONLINE][HARD][NICE][D&C]

http://codeforces.com/contest/732/problem/F 7

http://codeforces.com/contest/700/problem/C 7

http://www.spoj.com/problems/EC_P/ (3) //bridges ONLY

http://www.spoj.com/problems/SUBMERGE/ (3) //Direct articulation

http://www.spoj.com/problems/GRAFFDEF/ (5) //Bridge tree

http://codeforces.com/contest/1000/problem/E // Sugested by [user:Muhanad_Alwarareh]


</spoiler>

<spoiler summary="brute-force">

https://codeforces.com/gym/102302/problem/A (4) //[RMQ][BS][NEXT]

https://codeforces.com/contest/1166/problem/D (4) //[NICE][OBSERVATION][SEQUENCE][COMPLEXITY]

https://codeforces.com/contest/1169/problem/D (4) //[NICE][PROOF]

https://codeforces.com/contest/1169/problem/B (3) //[VERY NICE][FREQUENCY]

https://www.spoj.com/problems/YOSEQ/ (3) //[NICE][OBSERVATION]

UVA 13296 (5) //[NICE][RECURSION]

http://codeforces.com/gym/100112 (7) [L] //[PRECISION]

http://codeforces.com/gym/101806/problem/X (6) //[VERY NICE][DFS][IFS][OBSERVATION]

8259 - High Score [LA] (4) //[VERY NICE][TS works too] add only low number to minimum (NOT WORKING?)

http://codeforces.com/contest/922/problem/B (2) //Test all pairs - observe 3rd

http://codeforces.com/contest/919/problem/B (1) //Simply simulate

http://codeforces.com/contest/146/problem/B (2) //Test all bigger numbers

http://codeforces.com/contest/911/problem/B (1)

7692 - Square Deal (4) //Permutations+Swap

http://codeforces.com/contest/907/problem/A (2) //try all triples 0→ 200

http://codeforces.com/contest/124/problem/B (3) //next-permutation

http://codeforces.com/contest/910/problem/C (3) //Next-permutation

http://codeforces.com/contest/898/problem/B (2) //Try all possibilities

6160 - Countdown (5) //[NICE][DFS][EFFICIENT?]

http://codeforces.com/contest/122/problem/C (3) //Just around 2^10 lucky [RECURSION]

7899 - Mr. Panda and Strips (4) //Weak test-cases

7671	What a Beautiful Lake (2) //Try up/down from every node

http://codeforces.com/contest/110/problem/A (1) //4 or 7

http://codeforces.com/contest/106/problem/B (2) //Cycles -_-

http://codeforces.com/contest/895/problem/A (2) //All segments [in circle]

http://codeforces.com/contest/893/problem/B (2) //Try each divisor

http://codeforces.com/contest/894/problem/A (1) //3-cycles

http://codeforces.com/contest/892/problem/C (3) //Try to find "1" ASAP

http://codeforces.com/contest/102/problem/A (2) //Iterate over all triples

http://codeforces.com/contest/96/problem/B (2) //Check all

http://codeforces.com/contest/94/problem/B (1) //3cycles

http://codeforces.com/contest/887/problem/B (3) //Test all numbers

http://codeforces.com/gym/101597/problem/A (4) //[MATH][MODULO][SIMULATION]

http://codeforces.com/contest/68/problem/C (5) //[VERY NICE][RECURSION][MAX COST MIN FLOW]

http://codeforces.com/contest/68/problem/A (1) //Simple simulation

http://codeforces.com/contest/66/problem/B (2) //Test always whole platform

http://codeforces.com/contest/879/problem/C (3) //[NICE] one of each operation is enough

http://codeforces.com/contest/46/problem/C (2) //[2pointers][N^2 works too]

http://codeforces.com/contest/47/problem/D (4) //[Implementation][DFS]

http://codeforces.com/contest/51/problem/D (4) //Check all/check without 1s/2nd

http://code-festival-2017-qualc.contest.atcoder.jp/tasks/code_festival_2017_qualc_b (2)

http://codeforces.com/contest/53/problem/B (3) //at most 60 possibilities

http://codeforces.com/contest/55/problem/B (3) //Try all permutations & possibilities [NICE]

http://codeforces.com/contest/877/problem/B (3) //NICE [N^2][PrefixSum]

LA 6623 - Battle for Silver (3) //4 for-cycles inside ~ K4 search

UVA 12169 (2)

http://codeforces.com/contest/725/problem/C 4

http://codeforces.com/contest/725/problem/E 6

http://codeforces.com/contest/724/problem/B 3

11961 UVA (2)

11898 UVA (4)

11659 UVA (4)

http://codeforces.com/contest/753/problem/C 7

11699 UVA (4)

11548 UVA (3)

11471 UVA (5) //With dynamic programming

http://codeforces.com/contest/698/problem/D 8 //with geometry

http://codeforces.com/gym/101840 [F] (5) //[NICE][BS][DISTANCE]

11206 UVA (6) //4^20 (but somehow passes)

11214 UVA (6) //Úvaha + pruning

11127 UVA (4) //Simple dfs [just realize you can do so]

http://www.spoj.com/problems/BOKAM143SOU/ (3) //just implement for-cycles

http://www.spoj.com/problems/BLOPER/ (4) dfs with little pruning

13173 UVA (3) //just brute-force + branching

http://codeforces.com/contest/799/problem/D (4) //VERY NICE [only top 34 needed] &mdash; trick with 2 [~20]

10890 UVA (4) //Simple brute-force times out, but with simple pruning AC (answer detection

http://codeforces.com/contest/813/problem/B (3) //All*All (BF) care for overflow! NICE & EASY

http://codeforces.com/contest/817/problem/C (3) //Check S+Constant (NICE!)

10732 UVA (2) //Brute-force passes .. just don't trust them O(N^2)

10748 UVA (5) //VERY Nice (knights have K^2 moves not 8^K)

http://codeforces.com/contest/818/problem/D (4) //NICE for each 'A' check all remaining (max SQRT)

http://codeforces.com/contest/834/problem/E (5) //NICE &mdash; hard to imple: all 11122...999 OK

http://www.spoj.com/problems/JHAGIRLS/ (4) //Efficient &mdash; or store output in array

http://codeforces.com/contest/846/problem/B (3) //Brute-force

http://www.spoj.com/problems/ALONE/ (4) //Generate everything <10^15 [NICE]

http://codeforces.com/contest/861/problem/B (3) //Check all floor-sizes

http://www.spoj.com/problems/RRANGE/ (3) //Compare all queries agains all updates + GAUSS

http://codeforces.com/contest/598/problem/B (3) //Treap works too ;-)

http://www.spoj.com/problems/AMR10I/ (4) //Can be solved with brute-force with dp

http://codeforces.com/contest/868/problem/C (4) //Brute-force (fixet at most 6 each bits)

http://codeforces.com/contest/868/problem/D (5) //NICE: Maximal K is low (I assumed 15)

http://codeforces.com/contest/31/problem/C (2) //LOW-Constaints: N^2

http://codeforces.com/contest/32/problem/D (3) //Simply try all possibilities

http://codeforces.com/contest/876/problem/C (3) //Try N and ~100 lower

http://codeforces.com/contest/44/problem/B (2) //N^2 works fine

</spoiler>

<spoiler summary="centroid">

https://codeforces.com/gym/101991/problem/A (5) //[VERY NICE][FW]

http://codeforces.com/gym/101864 [D] (5) //[NICE][SACK][ARPA][HLD]

http://codeforces.com/gym/101840 [E] (5) //NICE

DCP-176: Motku2 [DevSkills] 

http://codeforces.com/contest/715/problem/C 9

http://codeforces.com/contest/741/problem/D 8

13164 UVA (7)

http://codeforces.com/contest/752/problem/F 5

http://codeforces.com/contest/766/problem/E 6

http://codeforces.com/contest/833/problem/D 7 //Very nice &mdash; hard (thinking + imple) + FW

http://www.spoj.com/problems/HOLI/ (4) //VERY NICE: 2*Distances from centroids 

</spoiler>

<spoiler summary="coloring">

https://codeforces.com/gym/102006/problem/K (6) //[VERY NICE][THEOREM][OBSERVATION]

http://codeforces.com/contest/741/problem/C 6

11331 UVA (4)

http://codeforces.com/contest/664/problem/D 4

</spoiler>

<spoiler summary="combinatorics">

http://www.spoj.com/problems/ADATEAMS/

http://www.spoj.com/problems/ADASUM/

https://codeforces.com/contest/1166/problem/A (2) //[B2]

https://codeforces.com/contest/1207/problem/D (4) //[NICE][FACTORIAL][STL]

https://codeforces.com/contest/1204/problem/E (6) //[COMBINATION NUMBERS]

https://codeforces.com/contest/1173/problem/D (4) //[VERY NICE][DFS][FACTORIAL]

https://atcoder.jp/contests/abc136/tasks/abc136_f (5) //[VERY NICE][IE][POWER][FENWICK]

https://codeforces.com/contest/1178/problem/C (3) //[NICE][EASY][POWER]

https://codeforces.com/gym/101972/problem/J (4) //[NICE][THEOREM][COMB-NUMBERS]

https://codeforces.com/gym/101972/problem/I (5) //[NICE][SHORT][COMB-NUMBERS]

http://codeforces.com/gym/101628/problem/G (5) //[NICE][COMB-NUMBERS]

http://codeforces.com/gym/101864 [E] (3) //Combination number, power

http://codeforces.com/gym/101879/problem/E (2) //Power of 2

http://codeforces.com/gym/101873 (5) //Necklace (mby burnside)

http://codeforces.com/gym/101808/problem/F (3) //[EASY]][FACTORIAL]

http://codeforces.com/problemset/problem/364/A (4) //[NICE][STL-or-sorting][IF]

http://codeforces.com/contest/145/problem/D (7) //[VERY NICE][SET][OBSERVATION][BS][BIG]

http://codeforces.com/contest/909/problem/B (3)

http://codeforces.com/contest/131/problem/C (3) //[EASY][BRUTE-FORCE][COMB-NUMBERS]

http://codeforces.com/contest/131/problem/B (2) //[EASY]

http://codeforces.com/contest/129/problem/E (5) //[NICE][COMB-NUMBERS]//Observe

http://codeforces.com/contest/111/problem/D (5) //[COMB-NUMBERS][POWER][VERY NICE][DP]

http://codeforces.com/contest/895/problem/D (4) //[COMB-NUMBERS][OPTI]

http://codeforces.com/contest/893/problem/E (5) //[COMB-NUMBERS][NUMBER-THEORY]

http://codeforces.com/contest/894/problem/B (3) //try without last row

http://codeforces.com/contest/890/problem/E (6) //Permutations

http://codeforces.com/contest/52/problem/B (4) //[NICE][PREPROCESS][ROTATION]

3917 //Grid tiling [fancy approximation fomula]

http://codeforces.com/contest/760/problem/F

https://devskill.com/CodingProblems/ViewProblem/61

https://devskill.com/CodingProblems/ViewProblem/255

UVA	10918

UVA	12576

UVA	1118 //Parity

http://www.spoj.com/problems/HLP_RAMS/ //Comb parity

Project Euler #78: Coin partitions //Partition function

http://www.spoj.com/problems/MAIN75/ //DP #of trees

12001 UVA (3)

12034 UVA (4)

11719 UVA (5)

11798 UVA (5)

11282 UVA (4) //dearrangement

11174 UVA (4)

http://codeforces.com/contest/666/problem/C 7

http://www.spoj.com/problems/JOKER1/ 3 prod(Ai-i)

http://www.spoj.com/problems/ANTP/ //4

http://codeforces.com/contest/645/problem/E (5) //formula: A[i]=Sum(A)+1

http://www.spoj.com/problems/SPCE/ (5) // N^{K-2}*Prod(comp_size)

http://codeforces.com/contest/785/problem/D (5) // F'(' C"(+)-1","("

13184 UVA (3)

http://codeforces.com/contest/816/problem/D (5) // Observation

13214 (4) //OEIS? : C(N+M-2,N-1)

http://codeforces.com/contest/844/problem/B (2) //Easy &mdash; pro prvaky

http://www.spoj.com/problems/JOSWAP/ (3) //Frequence array

http://www.spoj.com/problems/UCV2013E/ (4) //NICE&EASY: Choose steps to direction

http://www.spoj.com/problems/PARCARD1/ (4) //Partition function (raw)

http://www.spoj.com/problems/GOODB/ (2) //Easy (NICE): Choose [order]

http://www.spoj.com/problems/LOOPEXP/ (4) //A000254/N!

http://www.spoj.com/problems/DTPOLY/ (5) //DP might work too

http://www.spoj.com/problems/DTPOLY2/ (7) //Harder version of above (NICE but hell)

http://www.spoj.com/problems/HC12/ (3) //NICE &mdash; Sort + C(i,K-1)*A[i]

http://www.spoj.com/problems/STONE2/ (4) //NICE &mdash; Mostly DP [INVERSION][FACTORIAL]

http://www.spoj.com/problems/MAIN8_D/ (5) //NICE &mdash; Suffixes/Prefixes (same add 2^i)

http://www.spoj.com/problems/ITRIX_E/ (4) //VERY NICE &mdash; #Nonattacking 2-queens

http://www.spoj.com/problems/MAXSUB/ (3) //NICE &mdash; Subsets made of zeroes

http://www.spoj.com/problems/SKYLINE/ (3) //Catalan numbers [weird modulo &mdash; care]

http://codeforces.com/contest/26/problem/D (5) //Division of two combintion numbers [NI:/]

http://codeforces.com/contest/872/problem/E (6) // Prod:Sum(C(DistLines,CompSize))

</spoiler>

<spoiler summary="constructive">

https://codeforces.com/contest/1208/problem/C (4) //[NICE][SEQUENCE][XOR][D&C]

https://codeforces.com/contest/1166/problem/B (3) //[NICE][STRINGS][DIVISORS]

https://codeforces.com/contest/1206/problem/F (6) //[NICE][OBSERVATION][DFS][CENTROID]

https://codeforces.com/contest/1206/problem/C (3) //[NICE]

https://codeforces.com/contest/1148/problem/C (4) //[SORTING][PAPERWORK]

https://codeforces.com/contest/1174/problem/D (4) //[OBSERVATION][PREFIX SUM][SIMPLE CODING]

https://codeforces.com/contest/1174/problem/C (4) //[VERY NICE][SIEVE]

https://codeforces.com/contest/1173/problem/B (3) //[VERY NICE][MATH]

https://codeforces.com/contest/1202/problem/D (4) //[NICE][MATH][GREEDY]

https://codeforces.com/contest/1199/problem/E (5) //[VERY NICE!][OBSERVATION][DFS]

https://codeforces.com/contest/1180/problem/D (5) //[VERY NICE][OVSERVATION]

https://codeforces.com/contest/1178/problem/D (4) //[VERY NICE][OBSERVATION][NUMBER THEORY]

https://codeforces.com/contest/1187/problem/C (4) //[NICE][IMPLEMENTATION]

http://codeforces.com/contest/922/problem/F (6) //[NICE][MATH][GREEDY]

http://codeforces.com/contest/916/problem/C (3) //Graph construction

http://codeforces.com/contest/148/problem/B (3) //[SIMULATION](math or bs)

http://codeforces.com/contest/909/problem/F (6) //[VERY NICE][BITS]

http://codeforces.com/contest/141/problem/C (4) //[NICE][BRUTE-FORCE]

http://codeforces.com/contest/907/problem/D (5) //[VERY NICE][RANDOM]

http://codeforces.com/contest/124/problem/C (3) //[NICE][SIEVE]

http://codeforces.com/contest/125/problem/C (4) //[NICE][C(N,2)]

http://codeforces.com/contest/902/problem/C (4) //[NICE]//Tree isomorphism

http://codeforces.com/contest/112/problem/C (3) //[GREEDY]//Max + 1s

http://codeforces.com/contest/110/problem/B (2) //Easy modulo

http://codeforces.com/contest/894/problem/C (3) //[VERY NICE] //AiAiGCD

http://codeforces.com/contest/97/problem/B (4) //NICE - Walls in middles [D&C]

http://codeforces.com/contest/85/problem/A (3) //MODULO / SHIFT

http://codeforces.com/contest/81/problem/D (3) //NICE - MAX(N/2) - even/odd

http://codeforces.com/contest/63/problem/D (3) //NICE[GO BY LINES][4 WAYS B/D ODD/EVEN]

http://codeforces.com/contest/42/problem/C (4) //Constructive works too but random is fine :)

http://codeforces.com/contest/43/problem/D (3) //NICE - Easy to see [implementation]

http://codeforces.com/contest/53/problem/C (2) //EASY [B/E Alternate]

http://codeforces.com/contest/877/problem/C (3) //NICE 3*Alternative

http://codeforces.com/contest/802/problem/H (6) //We can do "N+k" by adding a letter p+k*x+u+xx

http://codeforces.com/contest/12/problem/E (5) //g[i][j]=1+(i+j)%(N-1) [+/-]

http://codeforces.com/contest/22/problem/C (4) //Start and then clique without v (+ random)

http://codeforces.com/contest/26/problem/C (5) //make Even*Even: do by 2*2 fields

http://codeforces.com/contest/41/problem/E (4) //[NICE][CN/2,N/2]

http://codeforces.com/contest/78/problem/B (2) //NICE - last 3 and then rest in modulo

http://codeforces.com/contest/109/problem/D (5) //[NICE][BACK-POINTERS][SIMULATION][SORT]

</spoiler>

<spoiler summary="dfs">

http://www.spoj.com/problems/ADASEA/

https://codeforces.com/contest/1176/problem/E (4) //[NICE][CONSTRUCTIVE][TREE][TOPO]

https://codeforces.com/contest/1186/problem/F (5) //[NICE][GREEDY][CONSTRUCTIVE]

https://codeforces.com/contest/1189/problem/D2 (5) //[NICE][CONSTRUCTIVE]

https://atcoder.jp/contests/agc035/tasks/agc035_b (4) //[NICE][DIRECTION]

https://www.spoj.com/problems/CHUNK2/ (3) //[DFS][PRIMES]

https://codeforces.com/gym/101981 [K] (4) //[VERY NICE][IMPLE][TREE][SIMULATION]

https://www.urionlinejudge.com.br/judge/en/problems/view/1621 (4) //[TREE][IMPLE]

https://www.urionlinejudge.com.br/judge/en/problems/view/1610 (3) //[CYCLE]

https://www.urionlinejudge.com.br/judge/en/problems/view/2911 (4) //[NICE][RULES][SIMPLE]

https://codeforces.com/gym/102001/problem/K (4) //[VERY NICE]

https://codeforces.com/gym/101972/problem/B (6) //[VERY NICE][TREE][STL]

https://toph.co/p/incompatible-crops (2)

http://codeforces.com/gym/100112 [K] (5) //[NICE][BS][COLORING]

http://codeforces.com/gym/101962 [D] (6) //[NICE] //Bitset shall work too

4286 - Equilibrium Mobile [LA] (5) //[VERY NICE][OBSERVATION][TREE][DP]

http://codeforces.com/gym/101801 (4) [H] //[TREE][DP] //More dfss

https://www.urionlinejudge.com.br/judge/en/problems/view/2732 (3) //Easy flood

http://codeforces.com/contest/920/problem/E (5) //[NICE][DFS][SET] //Or clever random

http://codeforces.com/contest/915/problem/D (4) //[VERY NICE][CYCLES DETECTION (ORIENTED)]

http://www.spoj.com/problems/CTTC/ (3) //[EASY][GRAPH-RECONSTRUCTION]

7951 - Islands (3) //[NICE]Flood-Fill

http://codeforces.com/contest/901/problem/D (7) //Observations / Tree reduction

http://codeforces.com/contest/902/problem/B (3) //No dfs needed

http://codeforces.com/gym/101630 {C}(4) //[NICE][SCC]

http://codeforces.com/gym/101620 {J}(4) //DFS + multiples of divisors

http://codeforces.com/contest/120/problem/F (3) //Width of tree

7606 - Percolation (3) //Dfs on grid [EASY]

http://codeforces.com/contest/116/problem/C (2) //[DEPTH]

8080 - Christmas Tree (3) //[SIMPLE][NICE]

6584 - Escape (8) //[VERY VERY VERY NICE][COMPRESSION][MERGING] //Hard but I recommend this one!!

6590 Digraphs (4) //[VERY NICE][CYCLES][DP][IDEA]

http://codeforces.com/contest/893/problem/C (3) //Minimum from each connected component

http://codeforces.com/contest/884/problem/C (3) //[EASY][PERMUTATIONS][SORTING]

http://codeforces.com/contest/883/problem/G (4) //Greedy picking

http://codeforces.com/contest/60/problem/B (3) //3D Flood-Fill [NICE][EASY]

http://codeforces.com/contest/60/problem/C (4) //[VERY NICE][BF]//Not many real possibilities

https://devskill.com/CodingProblems/ViewProblem/3

https://devskill.com/CodingProblems/ViewProblem/17

https://devskill.com/CodingProblems/ViewProblem/118 //Kind-of

657 &mdash; The die is cast [UVA]

12186 UVA (3)

http://codeforces.com/contest/734/problem/E (5)

http://codeforces.com/contest/727/problem/A (3)

http://codeforces.com/contest/723/problem/E (6)

http://codeforces.com/contest/709/problem/E (6)

http://codeforces.com/contest/710/problem/E (4)

http://codeforces.com/contest/758/problem/E (8)

11323 UVA (5)

http://codeforces.com/contest/760/problem/B (3)

http://codeforces.com/contest/761/problem/E (6)

http://codeforces.com/contest/638/problem/B (3) //connect cons. letters

http://codeforces.com/contest/638/problem/C (4) //greedy idea &mdash; easy

http://codeforces.com/contest/638/problem/D (5) //spec-DAG articulatin

http://codeforces.com/contest/767/problem/C (4) 

http://codeforces.com/contest/781/problem/C (5)

http://codeforces.com/contest/794/problem/D (5) //NICE! Right done dfs

http://codeforces.com/contest/802/problem/K (5) //Slightly DP-like (NICE) TREE

http://codeforces.com/contest/813/problem/C (3) //Simply 2 DFS: NICE + EASY

http://codeforces.com/contest/841/problem/D (4) //DFS while tracking "next"

http://codeforces.com/contest/845/problem/G (5) //Keep track of cycles

http://codeforces.com/contest/844/problem/E (5) //Post-Order → line, Connect i → N-2: star

http://www.spoj.com/problems/CAC/ (5) //VERY NICE! &mdash; Find all cycles in cactus

http://codeforces.com/contest/849/problem/C (3) //State search by gauss

http://codeforces.com/contest/846/problem/E (5) //NICE: DFS + some overflow logic

http://www.spoj.com/problems/KOZE/ (3) //NICE: Floods

http://www.spoj.com/problems/RIOI_2_3/ (4) //DFS /OR/ BFS /OR/ DSU [NICE][EASY][BF]

http://www.spoj.com/problems/MAKEMAZE/ (3) //EASY &mdash; Simple dfs on grid 

http://codeforces.com/contest/861/problem/F (5) //VERY NICE: Modify dfs tree so it remains connected

http://www.spoj.com/problems/GHOSTS/ (3) //NICE &mdash; must remain dag after each QR

http://www.spoj.com/problems/AMR10J/ (5) //VERY NICE! &mdash; DFS+DP [DAG with cycles]

http://codeforces.com/contest/24/problem/A (2)//NICE [DFS-ON-CYCLE]

http://codeforces.com/contest/29/problem/C (3) //Find begining/end of line (graph)

http://codeforces.com/contest/29/problem/D (4) //Tree [implementation][simulation]

</spoiler>

<spoiler summary="digits">

https://devskill.com/CodingProblems/ViewProblem/564 (2) //[OBSERVATION]

http://www.spoj.com/problems/PR003004/ (4) //Simple digits count

http://codeforces.com/contest/770/problem/B (3) //max num max digsum

</spoiler>

<spoiler summary="dijkstra">

http://www.spoj.com/problems/ADATRIP/

https://www.urionlinejudge.com.br/judge/en/problems/view/1655 (4) //[EASY][PROBABILITY]

https://www.urionlinejudge.com.br/judge/en/problems/view/2910 (4) //[TREE]

http://codeforces.com/gym/101628/problem/f (4)

http://codeforces.com/gym/100112 [E] (6) //[NICE][BS][GEOMETRY]

http://codeforces.com/gym/101845/problem/J (5) //[NICE][OBSERVATION][TWICE]

http://codeforces.com/gym/101801 [K] (5) //[NICE][MULTIPLE NODES]

http://codeforces.com/gym/101879/problem/F (8) //[NICE][BRIDGE]

http://codeforces.com/gym/101666 [D] (4) //[NICE]

http://codeforces.com/contest/144/problem/D (4) //[VERY NICE][IFS]

http://www.spoj.com/problems/ADRABR/ (3) //Classical dijkstra - bad statement

http://codeforces.com/contest/141/problem/D (5) //[NICE]Many Conditions

6583 Subway (5) //[NICE]//Not exactly dijkstra by slightly similar [IMPLEMENTATION]

3850 [LA]

Gym	100625D [2013 Benelux Algorithm Programming Contest (BAPC 13)]

UVA	12950

Gym	100753A [2015 German Collegiate Programming Contest (GCPC 15) + POI 10-T3]

UVA	13030

UVA	1027

UVA	11377

http://codeforces.com/problemset/problem/843/D

11813 UVA

Gym	101242B [2016 ACM-ICPC World Finals] //+DP

Gym	100923B [2015 ACM National Contest Romania &mdash; Round 1]

UVA	11833

http://www.spoj.com/problems/EZDIJKST/en/

LightOJ	1019

UVA	13010 //+TS

2819 [LA]

UVA	12144

http://codeforces.com/contest/716/problem/D 7

12047 UVA 4

11514 UVA 4

http://codeforces.com/contest/757/problem/F 7

11338 UVA (4)

11374 UVA (4)

11097 UVA (4) //Divide to N*1000 nodes and go!

13172 UVA (5) //6*DJ per query + permutations

10816 UVA (4) //Easy Linear-Search by answer + DJ with path

http://codeforces.com/contest/827/problem/F 7 //Very nice &mdash; Even&Odd  

http://www.spoj.com/problems/DELIVER/ (5) //Normalize coordinates + Optimalize

http://www.spoj.com/problems/CCHESS/ (4) //Dijkstra as knight

</spoiler>

<spoiler summary="divide_conquer">

https://codeforces.com/contest/1175/problem/F (7) //[VERY NICE][HASH][RANDOMISATION]

https://codeforces.com/contest/1181/problem/E2 (7) //[VERY NICE][SORTING][ST]

https://codeforces.com/contest/1181/problem/E1 (5) //[VERY NICE][OBSERVATION][SORTING]

https://codeforces.com/gym/102058/problem/G (7) //[VERY NICE][BS][PRIORITY_Q]

http://codeforces.com/gym/101845/problem/L (6) //[VERY NICE][INDUCTION]

http://codeforces.com/gym/101801 [J] (5) //[NICE][TRIE][RMQ]

8257 - Factor-Free Tree [LA] (6) //[VERY VERY NICE][PRIMES][FACTOR]

https://www.urionlinejudge.com.br/judge/en/problems/view/1683 (4) //RAW histogram

http://codeforces.com/contest/817/problem/D (5) //Very nice NlogN

http://www.spoj.com/problems/DYNACON2/ (8) //Lesser hell &mdash; offline Nlog(N) /or/ NlogN^2

http://codeforces.com/contest/876/problem/F (5) //VERY NICE &mdash; Find greatest + next/back functions

</spoiler>

<spoiler summary="divisors">

https://codeforces.com/gym/102302/problem/B (4) //[FACTORISATION][NUMBER THEORY]

https://codeforces.com/contest/1176/problem/D (4) //[NICE][GREEDY][SORTING]

https://atcoder.jp/contests/abc136/tasks/abc136_e (5) //[NICE][GREEDY][DIVISORS]

https://codeforces.com/contest/1183/problem/F (5) //[VERY NICE][SORTING][OBSERVATION][BF]

https://www.spoj.com/problems/KPOWERSUM/ (4) //[FACTORISATION]

http://codeforces.com/gym/101992/problem/D (5) //[VERY NICE][IE][NUMBER THEORY]

http://codeforces.com/gym/101982 [B] (5) //[FACTORISATION][GCD][SIEVE]

http://codeforces.com/gym/101864 [G] (5) //[VERY NICE][FACTORISATION][GCD]

http://codeforces.com/gym/101840 [D] (4) //[EVENTS][NICE]

http://codeforces.com/gym/101741/problem/F (6) //[NICE][PROBABILITY][GCD]

http://www.spoj.com/problems/FRNDAM/ (3) //Simply find sum of all divisors (low constraints)

http://codeforces.com/contest/920/problem/F (5) //[NICE][FAST FALL][SET][DIVISORS]

7726	A Simple Math Problem (4) //TLE if naive (consider only divisors)

http://codeforces.com/contest/112/problem/D (4) //[NICE] Last-position [FACTOR]

http://codeforces.com/contest/75/problem/C (3) //[NICE][BS]

LightOJ	1068

LightOJ	1134

Project Euler #95: Amicable chains

NAJ0001 &mdash; Divisible Number Sum [SPOJ]

http://www.spoj.com/problems/LCMSUM/

https://www.hackerrank.com/contests/101hack38/challenges/easy-gcd-1/problem

UVA	13085

http://www.spoj.com/problems/CDRSANJ/

http://www.spoj.com/problems/DIVSEQ/

UVA	12154

UVA	13058

http://www.spoj.com/problems/EC_DIVS/

https://www.codechef.com/problems/CHEFKEY

http://codeforces.com/problemset/problem/671/C

Gym	101411G	 [2009-2010 ACM-ICPC, NEERC, Western Subregional Contest]

http://codeforces.com/problemset/problem/831/F

http://codeforces.com/problemset/problem/839/D

12934 &mdash; Factorial Division [UVA]

UVA	10880

http://www.spoj.com/problems/PSTR/

http://codeforces.com/problemset/problem/27/E

[LA] 3014

UVA	12843

https://www.urionlinejudge.com.br/judge/en/problems/view/1164

http://codeforces.com/problemset/problem/803/F

10892 &mdash; LCM Cardinality

http://www.spoj.com/problems/GCDEX/

http://www.spoj.com/problems/INVDIV/

13083 &mdash; Yet another GCDSUM //ll

http://www.spoj.com/problems/IITKWPCF/ //ll

UVA	13185

UVA	13194

UVA	11388

http://www.spoj.com/problems/SAS002/

12425 &mdash; Best Friend

http://codeforces.com/problemset/problem/703/E

https://www.hackerearth.com/problem/algorithm/harry-gets-into-infy/

UVA	10830 //SUM

http://www.spoj.com/problems/DIVSUM/en/ //SUM

http://www.spoj.com/problems/AFS/ //SUM

UVA	11526 //SUM

</spoiler>

<spoiler summary="dp">

http://www.spoj.com/problems/ADAZOO/

http://www.spoj.com/problems/ADASEQEN/

http://www.spoj.com/problems/ADAMOLD/

http://www.spoj.com/problems/ADASALE/

https://codeforces.com/gym/102302/problem/E 

https://codeforces.com/gym/102307/problem/G (4) //[DAG][PRIORITY][GREEDY]

https://codeforces.com/contest/1208/problem/F (6) //[VERY NICE][BITS][GREEDY][SOS]

https://codeforces.com/contest/1174/problem/E (6) //[VERY NICE][NUMBER THEORY][OBSERVATION]

https://codeforces.com/contest/1203/problem/F2 (6) //[VERY NICE][GREEDY][SORTING][CASES]

https://codeforces.com/contest/1176/problem/F (5) //[NICE][IMPLE][SORTING]

https://codeforces.com/contest/1200/problem/F (6) //[NICE][DFS][GRAPH][LCM][MATH]

https://codeforces.com/contest/1201/problem/D (5) //[NICE][DP][IMPLE][CASES]

https://www.spoj.com/problems/THECODE/ (4) //[BITMASK]

https://codeforces.com/contest/1199/problem/F (5) //[NICE][DIMENSIONS]

https://codeforces.com/contest/1183/problem/H (4) //[NICE][SUBSEQUENCE][NEXT]

https://codeforces.com/contest/1183/problem/E (4) //[NICE][SUBSEQUENCE][NEXT]

https://codeforces.com/contest/1178/problem/F2 (7) //[VERY NICE][OBSERVATION]

https://codeforces.com/contest/1178/problem/F1 (5) //[NICE][MATH][REDUCTION]

https://codeforces.com/contest/1178/problem/B (3) //[EASY]Not even real DP

https://codeforces.com/contest/1195/problem/C (3) //[EASY]

https://codeforces.com/contest/1189/problem/F (6) //[VERY NICE][OBSERVATION]

https://atcoder.jp/contests/agc035/tasks/agc035_d (5) //[VERY NICE][BIT][IDEA]

https://www.spoj.com/problems/PLOVER/ (4) //[NICE][DIGITS]

https://www.spoj.com/problems/NICESEQ/ (4) //[DIGITS][POSSIBLY FASTER]

https://codeforces.com/gym/101981 [L] (5) //[NICE]

https://www.spoj.com/problems/RANDMOD/ (4) //[OBSERVATION][SEQUENCE]

https://www.urionlinejudge.com.br/judge/en/problems/view/1592 (4) //[GRAPH]

https://www.urionlinejudge.com.br/judge/en/problems/view/2824 (4) //Classical

https://codeforces.com/gym/102006/problem/D (4) //[NICE][OBSERVATION]

https://codeforces.com/gym/102021 [K] (4) 

https://codeforces.com/gym/102058/problem/D (5) //[NICE][DOMINATION]

UVA 13294 (4) //[BIT]

http://codeforces.com/gym/101992/problem/A (6) //[BITS][OBSERVATION]

http://codeforces.com/gym/101628/problem/H (3) //[NICE][CLASSICAL][DAG]

http://codeforces.com/gym/101628/problem/A (3) 

http://codeforces.com/gym/100112 [J] (4) //[NICE][TREE]

http://codeforces.com/gym/101982 [D] (5) //[VERY NICE][BITS] //Window

http://codeforces.com/gym/101982 [C] (4) //Classical combinatorics

http://codeforces.com/gym/101845/problem/E (5)

https://www.codechef.com/problems/SPECTAC (5) //[NICE]

http://codeforces.com/gym/101801 [E]

http://codeforces.com/gym/101801 [D] (6) //[VERY NICE][SEGMENT TREE][SORTING][NORMALIZE]

http://codeforces.com/gym/101873 [J] (7) //[NICE][IMPLEMENTATION][STRING][SUBSUBSET]

http://codeforces.com/gym/101889 [E] (4)

http://codeforces.com/gym/101808/problem/D (7) //[NICE][OPTIMISATION][EFFICIENCY]

http://codeforces.com/gym/101666 [I] (4)

http://codeforces.com/gym/101840 [A] (4) //Doubles

DevSkills 475: Bunty's Xor Game (4) //[BITS][GAME THEORY]

https://www.devskill.com/CodingProblems/ViewProblem/489 (5) //[NICE][FACTORISATION]

DevSkills 534 (4) //[BITSET][COMBINATIONS]

http://codeforces.com/gym/101650 [D] (5) //Not hard - more coding + printing

13286 - Ingredients (4) //[NICE][DAG] Classical

8299 - Bricks (5) //[NICE][COMBINATORICS][SORTING]

http://codeforces.com/contest/934/my (4) //Subsequence

http://codeforces.com/contest/922/problem/E (5) //find max mana

http://codeforces.com/contest/920/problem/D (4) //[NICE][KNAPSACK-MODULO][GREEDY]

http://codeforces.com/contest/919/problem/D (4) //[NICE][DFS][CYCLE][DAG]

http://codeforces.com/contest/914/problem/C (3) //[DIGITS][BINARY]

http://codeforces.com/contest/913/problem/E (5) //[NICE][EXPRESSION]

http://codeforces.com/contest/148/problem/E (5) //[DP][PREFIX SUM][GREED]

http://www.spoj.com/problems/PALMKR/ (4) //Classical palindrome + print + lexicography

http://codeforces.com/contest/146/problem/E (5) //[NICE][COMBINATORICS][OBSERVATION]

http://codeforces.com/contest/909/problem/C (4) //[NICE][CLASSICAL][EASY]

7785 - m-ary Partitions (4) //Combinatorics

http://codeforces.com/contest/133/problem/E (4) //[IMPLEMENTATION]

http://codeforces.com/contest/126/problem/D (5) //[NICE]//Decomposet DP//Own hash-map

http://codeforces.com/contest/910/problem/B (3) //Or many other ways

6154	RNA Secondary Structure (5) //[NICE] Unoptimal might work too

https://arc087.contest.atcoder.jp/tasks/arc087_b (4) //[VERY NICE][OBSERVATION]

http://codeforces.com/contest/903/problem/F (5) //[VERY NICE][BITMASK][BRUTE]

http://codeforces.com/contest/903/problem/A (2) //Easy knapsack-like // Low constraints

http://codeforces.com/contest/900/problem/E (4) //[NICE]//Patter-match: FFT or KMP or Brute-Force

http://codeforces.com/contest/118/problem/D (3) //[COMBINATORICS][LOW-CONSTRAINTS]

http://codeforces.com/contest/115/problem/E (5) //[VERY NICE][SEGMENT TREE]

http://codeforces.com/contest/116/problem/D (3) //CLASSICAL[LOW-CONSTRAINTS]

10128 Queue (uva) (4) //One possibility is bitmask - second combinatorics

http://codeforces.com/contest/110/problem/C (3) //[EASY]// Greedy/math works too

8078 - Bracket Sequence (4) //[VERY NICE][DP-LINKS]

http://codeforces.com/contest/106/problem/C (3) //[NICE][EASY]

http://codeforces.com/contest/895/problem/C (4) //[NICE]

8024	Stack Construction (4) //[NICE] Palindromic style - but not exactly

7708 - Cubes (6) //[MATH]

http://codeforces.com/contest/888/problem/F (6) //[NICE][FLAG]

http://www.spoj.com/problems/ACQUIRE/ (5) //[NICE][CH-OPT]

http://codeforces.com/contest/319/problem/C (6) //[NICE][CH-OPT]

http://www.spoj.com/problems/NKLEAVES/ (5) //[NICE][DC]

http://codeforces.com/contest/76/problem/D (4) //[BITS][OVERFLOW]

http://codeforces.com/contest/73/problem/C (4) //[NICE][EASY][TRY-ALL-LETTERS]

http://codeforces.com/contest/67/problem/C (4) //[NICE][LEAVENSTEIN]

http://codeforces.com/contest/67/problem/A (3) //[EASY][PRINTING][OTHER POSSIBLE WAYS]

http://codeforces.com/contest/55/problem/D (5) //[NICE][DIGITS][EFFICIENT]

http://codeforces.com/contest/56/problem/D (4) //String modification + printing [NICE]

http://codeforces.com/contest/58/problem/E (6) //[NICE][IMPLEMENTATION]

UVA	12181

https://devskill.com/CodingProblems/ViewProblem/21

https://devskill.com/CodingProblems/ViewProblem/37

https://devskill.com/CodingProblems/ViewProblem/71

https://devskill.com/CodingProblems/ViewProblem/103

https://devskill.com/CodingProblems/ViewProblem/107

https://devskill.com/CodingProblems/ViewProblem/115

https://devskill.com/CodingProblems/ViewProblem/126

https://devskill.com/CodingProblems/ViewProblem/131

https://devskill.com/CodingProblems/ViewProblem/134

https://devskill.com/CodingProblems/ViewProblem/174

https://devskill.com/CodingProblems/ViewProblem/186

https://devskill.com/CodingProblems/ViewProblem/201

https://devskill.com/CodingProblems/ViewProblem/338

https://devskill.com/CodingProblems/ViewProblem/368

https://devskill.com/CodingProblems/ViewProblem/392

https://devskill.com/CodingProblems/ViewProblem/399

https://www.hackerrank.com/contests/world-codesprint-5/challenges/mining //Opti

UVA	12915 //Opti

UVA	12524 //Opti

http://codeforces.com/problemset/problem/631/E //CH

https://devskill.com/CodingProblems/ViewProblem/6

https://devskill.com/CodingProblems/ViewProblem/11

11552 UVA (3)

12172 UVA (3)

4507 LA (5)

4510 LA (5) [+ geometry]

12181 UVA (6)

http://codeforces.com/contest/729/problem/F 6

http://codeforces.com/contest/735/problem/E 9

http://codeforces.com/contest/731/problem/E 5

12030 UVA (4)

http://codeforces.com/contest/721/problem/E 7

http://codeforces.com/contest/742/problem/D 4

12040 UVA (5)

http://codeforces.com/contest/712/problem/D 5

13162 UVA (6)

http://codeforces.com/contest/743/problem/E 6

11908 UVA (3)

11932 UVA (4)

http://codeforces.com/contest/745/problem/E (7)

11806 UVA (4)

http://codeforces.com/contest/747/problem/F (5)

11843 UVA (4)

http://codeforces.com/contest/752/problem/E (5)

http://codeforces.com/contest/703/problem/E (7)

11753 UVA (4)

11725 UVA (5)

http://codeforces.com/contest/722/problem/E (9)

http://codeforces.com/contest/760/problem/F (8)

11795 UVA (3)

11654 UVA (4)

11523 UVA (5)

11404 UVA (4)

11432 UVA (4)

11451 UVA (4) //C==20 mistake in statement

11301 UVA (4)

http://codeforces.com/contest/762/problem/D 5

11361 UVA (4) //digit DP

11365 UVA (7)

11391 UVA (4) //easy+implementation

11394 UVA (3)

11218 UVA (2)

11125 UVA (4) //slightly implementation

11076 UVA (3)

11081 UVA (4) //3 string subsequences (beware of fail)

http://codeforces.com/contest/678/problem/E (5) //bitset dp + probability

http://codeforces.com/contest/766/problem/C (4)

http://codeforces.com/contest/667/problem/C (3)

http://www.spoj.com/problems/MOVIFAN/ (3)

http://www.spoj.com/problems/ORDSUM23/ (3)

http://www.spoj.com/problems/DIVSEQ/ (4) //N^3 (but better...) works fine

http://codeforces.com/contest/633/problem/F (7) //Tree dp

http://www.spoj.com/problems/ADJDUCKS/ (4) sort + pick 2-3 continous O(N)

http://www.spoj.com/problems/JLNT/ (4) //pick 0 or 2 | 1e3*5e3

http://www.spoj.com/problems/TPCPALIN/ (5) //500^3 works (3rd countable)

http://www.spoj.com/problems/COLORSEG/ (4) //50^4==OK 50^4log(N)=TLE NICE

http://www.spoj.com/problems/POWERCAR/ (3) //1e3*1e3*2 &mdash; follow rules

http://www.spoj.com/problems/INGRED/ (5) //TSP-like [reduce + go]

http://www.spoj.com/problems/BADXOR/ (4) //classical subsets

http://www.spoj.com/problems/SPCO/ (5) //64*64*2 DP {OPT: prime O(1) + clear only half}

http://www.spoj.com/problems/WAYHOME/ (5) //NICE: 1) 1*1 b)12,1,**,2

http://www.spoj.com/problems/NFURY/ (2) //Minimal sum of squares

http://www.spoj.com/problems/GDIL/ (3) //combinatorics

http://codeforces.com/contest/791/problem/D (5) //Tree

http://codeforces.com/contest/791/problem/E (6) //V,K,X &mdash; pick any

http://codeforces.com/contest/789/problem/C (3)

13176 (4) //N^6

13179 (5) //NICE [Ath][Bth][TimeDiff]

http://codeforces.com/contest/796/problem/E (6) //NICE: N*P*K*K (WC can't happen!)

http://codeforces.com/contest/797/problem/E (4) //NICE: Almost BF-able (but care of low K)

http://codeforces.com/contest/793/problem/D (3) //NICE & EASY: begin/end/actual/USED

http://codeforces.com/contest/803/problem/E (4) //State search &mdash; many IF's (EASY)

http://codeforces.com/contest/805/problem/F (7) //NICE: DP on tree + fast BF + hack

http://codeforces.com/contest/808/problem/E (5) //NICE!

http://codeforces.com/contest/811/problem/C (4) //Precalculate + DP (greedy thinking)

10817 UVA 4 //Easy but slightly implementation

10859 UVA 4 //Nice &mdash; on tree .. but for a reason small constrains

10898 UVA 4 //Hash is lesser than 1e6 .. try everything

http://codeforces.com/contest/812/problem/B (3) //Not only DP, yet imho easiest ..many spec cases

http://codeforces.com/contest/813/problem/D (5) //VERY VERY NICE &mdash; N*N (none picked between a/b)

http://codeforces.com/contest/814/problem/E 5 //VERY NICE &mdash; Harder imple: Combinatorics

http://codeforces.com/problemset/problem/816/E (6) //NICE &mdash; Tree (hard 2C complexity)

http://codeforces.com/contest/837/problem/D (5) //NICE &mdash; yet kinda pain [must be iterative]

http://www.spoj.com/problems/AUT/ (4) //NICE &mdash; K is interesting ~ at most 1600

http://www.spoj.com/problems/GNYR04C/ (3) //Easy &mdash; Nice idea [Big→ Low approach]

http://www.spoj.com/problems/TIEROPE/ (4) //Process 2*L ~ otherwise pick BIG

http://www.spoj.com/problems/IITKWPCE/ (4) //Palindromes [efficiency!] &mdash; NICE!

IITKWPCD SPOJ (4) //+Slightly geometry 

UVA	1496 //[Steiner's Tree] Very Nice (8)

http://www.spoj.com/problems/LKS/ (3) //Classical knapsack

http://www.spoj.com/problems/UOFTAE/ (3) //Easy & Sympatic DP

http://www.spoj.com/problems/DCOWS/ (4) //Very NICE (sort + GO)

http://www.spoj.com/problems/FARIDA/ (3) //Easy & Sympatic ((u+1) | Price+(u+2))

http://www.spoj.com/problems/AU7_5/ (2) //EASY: dyn(n-1)+dyn(n-k-1)

http://www.spoj.com/problems/NAIVELOK/ (4) //NICE [depalindromisation] 

http://codeforces.com/contest/846/problem/C (4) //With print

http://www.spoj.com/problems/CNT_LUCK/ (4) //Number (binary) dp [NICE] {ull care 0-1}

http://www.spoj.com/problems/MAY99_4/ (3) //Almost combinatoric Sub and 0/1,1/0

http://www.spoj.com/problems/GEEKOUNT/ (4) //Number dp

http://www.spoj.com/problems/MUTDNA/ (4) // N*2 (turned?) [not sure if grd poss.]

http://www.spoj.com/problems/RIOI_3_2/ (5) //VERY NICE (easy imple &mdash; Number Theory thinking)

http://www.spoj.com/problems/MAXWOODS/ (3) //NICE [EASY][GRID]

http://www.spoj.com/problems/DIEHARD/ (3) //Easy &mdash; prolly solvable by greedy (but dp is easier)

http://www.spoj.com/problems/DCEPC810/ (4) //VERY VERY NICE &mdash; Subsequence 2pointers+2bools

http://www.spoj.com/problems/EQ2/ (4) //NICE: Digit + Carry (from back) &mdash; iff-party

http://www.spoj.com/problems/DCEPC501/ (3) //NICE & EASY

http://www.spoj.com/problems/NUMTSN/ (4) //NICE &mdash; Thinking or Opti

http://www.spoj.com/problems/GONE/ (4) //NICE & EASY [digits]

http://www.spoj.com/problems/RAONE/ (4) //NICE & EASY [digits] &mdash; almost similar as above

http://www.spoj.com/problems/STRSEQ/ (4) //VERY VERY NICE &mdash; Next-Function

http://www.spoj.com/problems/MYQ8/ (4) //VERY NICE &mdash; 3x3 tic-tac-toe [implementation]

http://codeforces.com/contest/859/problem/C (3) //Easy+Sympathic [PrefixSumOptional]

http://codeforces.com/contest/859/problem/D (4) //NICE [Probabilities]

http://www.spoj.com/problems/UNICA/ (4) //VERY NICE [Posibilities][Print][Classical]

http://www.spoj.com/problems/KOPC12H/ (4) //NICE Digit-DP

http://www.spoj.com/problems/DRACULA/ (4) //NICE Digit-DP (Both sides) &mdash; iterate by sum

http://www.spoj.com/problems/ABCPATH/ (3) //DP over dfs (maybe without dp works too?)

http://www.spoj.com/problems/BEHAPPY/ (2) //Easy one &mdash; low constraints

http://www.spoj.com/problems/STRCOUNT/ (4) //No input (over bits)

http://codeforces.com/contest/855/problem/B (2) //prolly not even necessary

http://codeforces.com/contest/855/problem/C (4) //dp on tree

http://codeforces.com/contest/855/problem/E (5) //VERY NICE &mdash; Digits & Bitmask & Query (learning!)

http://www.spoj.com/problems/PAINTWAL/ (6) //VERY NICE &mdash; Imho hard (opti could beat)

http://www.spoj.com/problems/ADFRUITS/ (3) //Very simple (substring == subsequence)

http://www.spoj.com/problems/MAIN113/ (2) //NICE but somehow too low constraints

http://www.spoj.com/problems/MAIN112/ (4) //NICE &mdash; Bitmask 

http://codeforces.com/contest/864/problem/E (5) //VERY NICE &mdash; Sort 

http://www.spoj.com/problems/NOVICE63/ (4) //NICE -On digits (binary)

http://www.spoj.com/problems/TUG/ (3) //NICE + Observation {N>100 == YES}

http://www.spoj.com/problems/DOMINO1/ (4) //Used map to solve it

http://www.spoj.com/problems/NY10E/ (2) //Easy dp

http://www.spoj.com/problems/MAIN72/ (3) //Easy knapsack

http://www.spoj.com/problems/NOVICE43/ (2) //Unbelievably low constraints

http://codeforces.com/contest/598/problem/E (4) //N^5 strategy works fine [VERY NICE]

http://www.spoj.com/problems/CHAIR/ (3) //Maybe combinatorics too?

http://www.spoj.com/problems/ACPC10D/ (3) //NICE &mdash; DAG traversal

http://www.spoj.com/problems/CPCRC1C/ (4) //Digits dp (return pair)

http://www.spoj.com/problems/BORW/ (3) //Inc+Dec sequence (small array)

http://codeforces.com/problemset/problem/16/E (5) //Bitmask [NICE]

http://codeforces.com/problemset/problem/18/E (5) //VERY NICE {no need for second iteration}

http://codeforces.com/contest/2/problem/B (5) //NICE &mdash; 2/5 are in-fact independent

http://codeforces.com/contest/4/problem/D (3) //Classical [FW works too] XY > xy

http://codeforces.com/contest/6/problem/D (4) //NICE (N^4)

http://codeforces.com/contest/321/problem/E (7) //VERY NICE &mdash; D&C Trick

http://codeforces.com/contest/868/problem/F (8) //VERY VERY NICE  D&C Trick &mdash; With MO Principal

http://codeforces.com/contest/8/problem/C (5) //NICE &mdash; Masks [N*2^N]

http://codeforces.com/contest/868/problem/E (8) //VERY NICE &mdash; HARD &mdash; on tree

http://codeforces.com/contest/10/problem/D (4) //LCIS [NICE]

http://codeforces.com/contest/13/problem/C (5) //NICE [sorting][only elements from array]

http://codeforces.com/contest/17/problem/C (5) //[NICE][iterative-sparse][+idea]

http://codeforces.com/contest/19/problem/B (4) //Knapsack (after good look)

http://codeforces.com/contest/30/problem/C (4) //Probabilities + (slight)GEO

http://codeforces.com/contest/31/problem/E (4) //[NICE]

http://codeforces.com/contest/41/problem/D (4) //With printing

</spoiler>

<spoiler summary="dsu">

http://www.spoj.com/problems/ADABRANC/

https://www.spoj.com/problems/CONSEC/ (4) //[NICE][OFFLINE]

https://codeforces.com/gym/102006/problem/C (4) //[NICE][BRUTE-FORCE]

http://codeforces.com/gym/101962/problem/J (5) //[VERY NICE][TREE-FAT][SPARSE]

http://codeforces.com/contest/915/problem/F (6) //[VERY NICE][SORTING]

http://codeforces.com/contest/141/problem/E (6) //[NICE][SPANNIG TREE]

7903 - Pandaria (7) //[VERY NICE][DSU][SORTING][MERGE][DFS]

http://codeforces.com/contest/110/problem/E (4) //[NICE][COMBINATORICS][TREE]

http://codeforces.com/contest/90/problem/E (5) //[NICE][DSU-LIKE-LINKS][SIMULATION]

http://codeforces.com/contest/87/problem/D (5) //[VERY NICE][SORTING][COMPRES][DFS]

http://codeforces.com/contest/884/problem/E (5) //[VERY NICE][MEMORY SPARSE]

http://codeforces.com/contest/60/problem/D (6) //[NICE][Pythagorean Triples][Gen over max!]

UVA	10947

UVA	12363

LA	3833 

http://codeforces.com/problemset/problem/742/D  //+DP

UVA	10178

http://codeforces.com/contest/723/problem/F 7

13153 UVA (5)

13169 UVA (3)

11987 UVA (3)

11474 UVA (4)

http://www.spoj.com/problems/BTCODE_G/

http://codeforces.com/problemset/problem/691/D

Gym	101174K [2016-2017 ACM-ICPC Southwestern European Regional Programming Contest (SWERC 2016)]

UVA	10583

LightOJ	1003

http://codeforces.com/problemset/problem/731/C

UVA	793 

UVA	11966

https://www.codechef.com/problems/COZIC

3939 [LA]

UVA	11503

http://codeforces.com/problemset/problem/755/C

UVA	1395

http://codeforces.com/contest/687/problem/D 6

http://codeforces.com/contest/680/problem/E 7 //+precalculation/brute force

http://codeforces.com/contest/766/problem/D 5

http://www.spoj.com/problems/LEXSTR/ (3) //Nice na stringu

http://codeforces.com/contest/805/problem/C 3 //NICE (dijkstra like :P)

http://www.spoj.com/problems/IITKWPCI/ (3) //VERY NICE 

http://www.spoj.com/problems/FRNDCIRC (3) //Classical DSU (NICE for practice)

http://www.spoj.com/problems/FOXLINGS/ (3) Easy &mdash; just renumbering

http://www.spoj.com/problems/NITTROAD/ (4) //Process from back

http://www.spoj.com/problems/SHAHBG/ (2) //DSU not needes (simulated by array)

http://codeforces.com/contest/598/problem/D (3) //Can be solved with DFS too

http://codeforces.com/contest/9/problem/E (4) //Making one big cycle

http://codeforces.com/contest/25/problem/D (4) //Could be done linear too

http://codeforces.com/contest/28/problem/B (4) //NICE [imho bad statement]

http://codeforces.com/contest/876/problem/D (4) //DSU adjacent + visited

http://codeforces.com/contest/875/problem/F (6) //NICE &mdash; Maximum cactus-forest [kruskal-like]

</spoiler>

<spoiler summary="euler_function">

http://codeforces.com/gym/101879/problem/C (6) //[VERY NICE][DFS]

http://codeforces.com/contest/907/problem/F (7) //[MAGIC]

UVA	10299

UVA	10990

https://www.codechef.com/problems/SMPLSUM

https://www.codechef.com/problems/COZIE

http://www.spoj.com/problems/LCMSUM/

Gym	100975F [2003-2004 Petrozavodsk Summer Training Camp, Saratov SU Contest]

UVA	13132

http://www.spoj.com/problems/GCDEX/

UVA	12995

http://www.spoj.com/problems/TIP1/

UVA	11327

LightOJ	1007

http://www.spoj.com/problems/ETF/

Project Euler #72: Counting fractions

http://www.spoj.com/problems/DCEPCA03/

http://www.spoj.com/problems/NAJPWG/ 4 //Gauss-Euler

http://www.spoj.com/problems/DCEPC12G/ (5) //Do what is written there

http://www.spoj.com/problems/INVPHI/ (5) //Inverse euler

</spoiler>

<spoiler summary="euler_tour">

https://codeforces.com/gym/102006/problem/H (4) //[SORTING][OBSERVATION]

http://codeforces.com/gym/101650 [I](5) //[NICE][GRAPHS]// Theory is useful

13246 - Chained Words (4) //[NICE][LEXICOGRAPHICAL]

UVA	10735

http://codeforces.com/contest/789/problem/D //Adj EG + Self/everything

http://codeforces.com/contest/21/problem/D (5) //[NICE][EulerTour+DP]

http://codeforces.com/contest/36/problem/E (6) //VERY NICE [4odd is hardest]

</spoiler>

<spoiler summary="factorization">

http://www.spoj.com/problems/ADAHW/ [RHO][Number Theory]

http://www.spoj.com/problems/ADADIGIT/ [Permutations]

https://www.spoj.com/problems/PRIMEP/ (5) //[VERY NICE][SEGMENT][BS][SIEVE]

https://codeforces.com/gym/101981 [J] (4) //[NICE][DIVIDE]

http://codeforces.com/gym/101801 [B] (3) 

UVA	13067

Project Euler #108: Diophantine reciprocals I

http://www.spoj.com/problems/CHGROOM/

Gym	101370A [2009-2010 Summer Petrozavodsk Camp, Petr Mitrichev Contest 5]

http://codeforces.com/problemset/problem/837/E

http://www.spoj.com/problems/PSYCHOT/

http://www.spoj.com/problems/FACTDIV/

http://www.spoj.com/problems/NOSQ/

http://www.spoj.com/problems/FCDC/

http://www.spoj.com/problems/NFACTOR/

http://www.spoj.com/problems/ABA12D/

http://www.spoj.com/problems/PSTR/

http://www.spoj.com/problems/AMR11E/

http://www.spoj.com/problems/FACT1/

http://www.spoj.com/problems/FACT2/

https://www.hackerearth.com/problem/algorithm/gold-at-lolympics/

12005 UVA (7)

12062 UVA (6)

11960 UVA (3)

http://www.spoj.com/problems/FACTCG2/ (3)

http://www.spoj.com/problems/FACT0/ (4)

http://codeforces.com/contest/546/problem/D 5

http://codeforces.com/contest/222/problem/C 6

http://www.spoj.com/problems/COMDIV/ 3

http://www.spoj.com/problems/SINEGGS/ 3

http://www.spoj.com/problems/BDOI16B/ 4

http://www.spoj.com/problems/HG/ 4 //Map == OK

11099 UVA (3) //factor + recursion

13194 UVA (3) //factorize+generate /or just check

13191 UVA (6) //Pollard-Rho

http://codeforces.com/contest/818/problem/E (4) // Efficient + Two Pointers

http://codeforces.com/contest/831/problem/F (6) //MAGIC

http://codeforces.com/contest/839/problem/D (4) // Combinatorics + IE

http://www.spoj.com/problems/SAS002/ (5) //Find all divisors (big numbers)

http://www.spoj.com/problems/GCDS/ (4) //Lowest unused prime

http://www.spoj.com/problems/IITKWPCF/ (4) //Nonprime divisors of N/2

http://codeforces.com/contest/851/problem/D (4) //Properties of GCD + factor: NICE

http://www.spoj.com/problems/PTIME/ (3) //Low bounds &mdash; check each prime independently

http://www.spoj.com/problems/MAIN12B/ (3) //NICE [Factorization][Sort][Unique]

http://www.spoj.com/problems/AMR11E/ (2) //2664 is the biggest

http://www.spoj.com/problems/GCPC11A/ (4) //Very nice &mdash; factorize + divide N by powers

http://www.spoj.com/problems/AMR10C/ (3) //Maximum of factor-powers

</spoiler>

<spoiler summary="fenwick">

http://www.spoj.com/problems/ADABEHIVE/ [2D]

http://www.spoj.com/problems/ADACABAA/ [2D][Sparse]

https://codeforces.com/contest/1191/problem/F (5) //[NICE][SORTING]Or similar DS

https://codeforces.com/gym/102001/problem/H (4) //[NICE][GREEDY]

https://toph.co/p/easy-prime (4) //[EASY][SIEVE]

https://toph.co/p/mario-and-princess-peach (5) //[NICE][DP][SEGMENT TREE][MAX]

http://codeforces.com/gym/101628/problem/B (5) //[NICE][SPARSE][STL]

http://codeforces.com/gym/100112 (4) [B] //[NICE][INVERSION][OBSERVATION]

http://codeforces.com/gym/101982 (7) [I] //[VERY NICE][INVERSION][OBSERVATION]

http://codeforces.com/gym/101908/problem/C (4) //[MATH][INVERSION]

http://codeforces.com/gym/101889 (5) //[NICE] normalize

DevSkills-422: Double Pairs (4) //[NICE] normalize

7591 - Distribution Center (4) //[NICE][SORTING]

http://codeforces.com/contest/903/problem/D (5) //[NICE][BIG]

http://codeforces.com/contest/102/problem/D (4) //[NICE][+DP][NORMALIZE]

http://codeforces.com/gym/101047/problem/J [2D]

http://www.spoj.com/problems/MATSUM/ [2D]

https://www.hackerearth.com/practice/data-structures/advanced-data-structures/fenwick-binary-indexed-trees/practice-problems/algorithm/counting-in-byteland/ [3D]

https://devskill.com/CodingProblems/ViewProblem/300

http://codeforces.com/contest/707/problem/E 7 [2D]

http://codeforces.com/contest/749/problem/E 8

http://codeforces.com/problemset/gymProblem/101055/D 5 [2D]

11240 UVA (4)

http://codeforces.com/contest/459/problem/D (4) //[NICE][SWEEPING]

http://codeforces.com/contest/61/problem/E (4) //[NICE][CLASSICAL][2*FW][NORMALIZE]

http://codeforces.com/contest/669/problem/E 5 //fenwicks &mdash; sparse

http://codeforces.com/contest/777/problem/E 4 //MAXIMUM

http://www.spoj.com/problems/TULIPNUM/ 4 //inc &mdash; 1 nor+num|sum(A[B],A[E])

http://codeforces.com/contest/799/problem/C 3 //MAX FW (but possibly easier?)

http://codeforces.com/contest/831/problem/E 4 //MAP to get ORDER &mdash; FW == LIST

http://www.spoj.com/problems/SAS001/ (4) //Nice &mdash; number of inversions + 2P

http://www.spoj.com/problems/TPGA/ (4) //NICE &mdash; Lesser*(N-i-1)!

http://www.spoj.com/problems/SGIFT/ (4) //BS works too

http://www.spoj.com/problems/SUMSUM/ (5) //Bit-by-Bit cnt 0/1

http://www.spoj.com/problems/AKVQLD03/ (3) //Classical fenwick &mdash; easy

http://www.spoj.com/problems/ZIGZAG2/ (6) //Very nice &mdash; FW + BS + DP

http://codeforces.com/contest/849/problem/E (7) //2D Fenwick / ST+TP [NICE]

http://www.spoj.com/problems/CRAYON/ (5) //VERY NICE [2*FW &mdash; begin + end]

http://www.spoj.com/problems/NITT8/ (4) //Norm. + Store indices in MAX-Fenwick [REVERSE] [VERY NICE]

http://www.spoj.com/problems/DCEPC705/ (4) //NICE! Sort + Fenwick

http://www.spoj.com/problems/DCEPC206/ (3) //NICE & EASY <or many other approaches>

http://www.spoj.com/problems/KOPC12G/ (4) //N Fenwick trees

http://www.spoj.com/problems/TRIPINV/ (4) //2xFenwick (triples counting)

http://codeforces.com/contest/597/problem/C (4) //[VERY NICE] 11*Fenwick

http://codeforces.com/contest/12/problem/D (4) //NICE [triplet-comparing][sort]

https://www.spoj.com/problems/NARHIL/ // Sugested by [user:ak07]

</spoiler>

<spoiler summary="fft">

http://www.spoj.com/problems/ADAMATCH/

https://toph.co/p/play-the-lottery (7) //[VERY NICE][D&C][MODULAR]

UVA	12633

6886 &mdash; Golf Bot [LA]

http://www.spoj.com/problems/POLYMUL/en/

Gym	100960C [2015-2016 Petrozavodsk Winter Training Camp, Nizhny Novgorod SU Contest]

https://www.codechef.com/problems/APRPS

https://www.codechef.com/problems/POLYEVAL

http://www.spoj.com/problems/TSUM/ 5

13182 UVA 5 //ACTG hamming

http://codeforces.com/contest/827/problem/E (8) //MAGIC

http://www.spoj.com/problems/MAXMATCH/ 5 //abc hamming

</spoiler>

<spoiler summary="flow">

https://www.spoj.com/problems/DISGRAPH/ (5) //Stoer-Wagner [global]

https://codeforces.com/gym/101981 [I] (4) //[NICE]

http://codeforces.com/gym/101982 [E] (5) //[VERY NICE][GRID]

http://codeforces.com/gym/101845/problem/F (4) //Basic

http://codeforces.com/gym/101908/problem/G (4) //[NICE][MATCHING][BS]

http://www.spoj.com/problems/FASTFLOW/en/ //Raw (no sauce)

http://codeforces.com/contest/78/problem/E (5) //NICE [Matching-like][+BFS]

4322 — Destroying the bus stations (Live Archive)

11380 — Down Went The Titanic (UVA) //Interesting grid problem

6395 — Surely You Congest (LA) //VERY NICE [slightly advanced]

7204 — Blood groups (LA)

http://codeforces.com/gym/100963 (Flame of Nucleus — F)

11167 — Monkeys in the Emei Mountain //Also harder (imho)

http://codeforces.com/problemset/problem/653/D (+BS)

13000 — VIP Treatment (+BS)

1242 — Necklace

https://www.deadline24.pl/assets/problemsets/dl24.elim.2017.B.en.pdf (DEADLINE 24 problem — not sure if it can be submited :O)

3487 — Duopoly (Near matching)

http://codeforces.com/problemset/problem/727/D

http://codeforces.com/problemset/problem/704/D [Also advanced]

5418 — A Plug for UNIX (LA)

4957 — Fake scoreboard (LA) //If I remember well, other solutions was also possible

1155 — Power Transmission (LOJ) //(classical)

https://www.codechef.com/problems/ROBOTDAG //Ford-Fukherson

10804 — Gopher Strategy (UVA)

11506 — Angry Programmer (UVA) //Nodes division

10511 — Councilling (UVA)

563 — Crimewave

1306 — The K-League (UVA)

1345 — Jamie's Contact Groups

10092 — The Problem with the Problem Setter

Problem B. Roller Coaster Scheduling (GCJ — 2017)

259 — Software Allocation (UVA)

5905 — Pool construction (LA) //Imho harder

10480 — Sabotage

http://codeforces.com/contest/808/problem/F 6 //NICE &mdash; nontrivial (max matching with bigger flows)

http://codeforces.com/contest/847/problem/J 6 //Probably not flows &mdash; matching-like

</spoiler>

<spoiler summary="flow-matching-like">

http://www.spoj.com/problems/ADAHOSE/ [DUAL-GRAPH]

http://codeforces.com/contest/903/problem/G (6) //[VERY NICE][SEG-TREE][CUT]

3837 [LA] //Stable Marriage

UVA	1175 //Stable Marriage

11594 — All Pairs Maximum Flow (UVA)

http://www.spoj.com/problems/ADABLOOM/ //Maximum matching in general graph

11439 — Maximizing the ICPC //Maximum matching in general graph

1376 — Animal Run //Max flow on planar graph (Dual == shortest path over edges)

10989 — Bomb, Divide and Conquer //Stoer-Wagner — global cut

</spoiler>

<spoiler summary="floyd-warshall">

https://codeforces.com/contest/1204/problem/C (4) //[DP] Nice but hard statement

https://codeforces.com/contest/1202/problem/B (3) //[VERY NICE]

http://codeforces.com/gym/101845/problem/C

https://www.urionlinejudge.com.br/judge/en/problems/view/2676 (3) //simple FW

10724 UVA

UVA	117

http://codeforces.com/problemset/problem/21/D

UVA	1198

LightOJ	1086 //+DP

http://www.spoj.com/problems/INGRED/ //+DP

UVA	10048

UVA	125

Gym	101223C [2017 Facebook Hacker Cup, Round 1] //+DP

LightOJ	1221

UVA	423

UVA	12179 //+DP

UVA	1416

UVA	1233 

UVA	10793

10099 UVA

UVA	869

LightOJ	1174

http://www.spoj.com/problems/ARBITRAG/ //Other algos shall work too 

13211 UVA (5) //NICE &mdash; FW adding states

http://www.spoj.com/problems/ROHAAN/ (3) //Classical

http://codeforces.com/contest/25/problem/C (4) //Adding new edges .. need FW principal

http://codeforces.com/contest/33/problem/B (3) //NICE [dijkstra could work too]

</spoiler>

<spoiler summary="friedvaldAlgorithm">

http://www.spoj.com/problems/ADAPOWER/

4956 [LA]

</spoiler>

<spoiler summary="game_theory">

http://www.spoj.com/problems/ADAGAME/ [DP]

http://www.spoj.com/problems/ADAGAME2/

http://www.spoj.com/problems/ADAGAME4/ 

http://www.spoj.com/problems/ADAQUBIC/

http://www.spoj.com/problems/ADAFIMBR/

http://www.spoj.com/problems/ADAGAME5/

http://www.spoj.com/problems/ADAXMAS/

https://codeforces.com/contest/1194/problem/D (4) //[OBSERVATIO][PATTERN]

https://codeforces.com/contest/1191/problem/E (4) //[NICE][IF][OBSERVATION]

https://www.spoj.com/problems/HUSGAME/ (4) //[VERY NICE][OBSERVATION][RECURSION]

https://www.spoj.com/problems/IBIGAME/ (5) //[VERY NICE][OBSERVATION][DP]

https://codeforces.com/gym/101981 [A] (4)

https://codeforces.com/gym/102058/problem/F (4) //[NICE]

http://codeforces.com/gym/101801 [F] (3) //[EASY][OBSERVATION][NIM]

http://codeforces.com/gym/101908/problem/B (5) //[NICE][NIMBERS][OBSERVATION]

http://codeforces.com/gym/101873 [H] (5) //[VERY NICE][OBSERVATION][TREE] //LUP LUP

http://codeforces.com/gym/101808/problem/I (5) //[DP][OBSERVATION]

http://codeforces.com/contest/919/problem/F (6) //[NICE][HARD][IMPLE][BFS][TOPO][GRAF]

http://codeforces.com/contest/918/problem/D (4) //[NICE][DAG][DP][TREE]

http://codeforces.com/contest/914/problem/B (3) //[NICE][EASY][OBSERVATION][PARITY]

http://codeforces.com/contest/148/problem/D (4) //[EASY][DP][PROBABILITY]

http://codeforces.com/contest/138/problem/D (7) //[VERY NICE][DP][OBSERVATION]

https://arc087.contest.atcoder.jp/tasks/arc087_c (5) //[VERY NICE][TRIE][SEQUENCE]

http://codeforces.com/contest/120/problem/E (3) //[NICE][SYMETRY][PARITY]

http://codeforces.com/contest/88/problem/E (5) //[VERY NICE][PREFIX-XOR][NIMBERS][SQRT][MATH]

http://codeforces.com/contest/69/problem/D (4) //[NICE][DP] Reflection can be ignored

http://codeforces.com/contest/55/problem/C (4) //[NICE] Size of piece from border

http://codeforces.com/problemset/problem/255/E --MEX

https://devskill.com/CodingProblems/ViewProblem/91

https://devskill.com/CodingProblems/ViewProblem/364

Project Euler #96: Su Doku //Sudoku

11859 UVA 4

11863 UVA 4

11892 UVA 3 //Probably solved by many

11534 UVA 5

http://www.spoj.com/problems/VECTAR11/ 4 //Nsqrt(N) passes [with break]

http://codeforces.com/contest/768/problem/E (4) //NICE &mdash; Grundy

http://www.spoj.com/problems/SYNC13C/ (4) //2*DP {maybe not seeing sth}

http://codeforces.com/contest/787/problem/C (4)

http://codeforces.com/contest/794/problem/C (3) //Find optimal strategy: choose back/front

http://codeforces.com/contest/794/problem/E (5) //NICE Find stategy: Even/Odd

http://codeforces.com/contest/812/problem/E (7) //Advanced NIM strategy

http://www.spoj.com/problems/GAMEMVS/ (4) //Nimbers (Ai^X)<=Ai

http://www.spoj.com/problems/PLAYGAME/ (3) //Check pattern

http://www.spoj.com/problems/CHAOS_CC/ (4) //VERY NICE [nimbers]

http://codeforces.com/contest/851/problem/E (5) //Very nice [nimbers] [bitset]

http://www.spoj.com/problems/CHGROOM/ (4) //+Factorisation [NICE & Easy]: Win unless 2 prime factors

http://www.spoj.com/problems/EALP1/ (4) //NICE ~ Possible Moves of NIM

http://www.spoj.com/problems/GAME3/ (4) //VERY NICE &mdash; pattern watching [A145812]

http://www.spoj.com/problems/GAME2/ (5) //VERY NICE &mdash; https://community.topcoder.com/tc?module=Static&d1=match_editorials&d2=srm338 (CAKE)

http://www.spoj.com/problems/CF36D/ (5) //Pattern watching (care for 1)

http://codeforces.com/contest/15/problem/C (4) //VERY NICE [XOR: A,1,A+1,0..repeat]

http://codeforces.com/contest/39/problem/E (4) //Slightly [DP][MATH][ROUNDING]

http://codeforces.com/contest/63/problem/E (5) //[NICE][BITMASK-DP]

</spoiler>

<spoiler summary="gauss">

12910 &mdash; Snakes and Ladders [UVA]

UVA	10828

http://codeforces.com/gym/100923/problem/C

4963 [LA]

UVA	12849

Gym	100962A [2015-2016 Petrozavodsk Winter Training Camp, Moscow SU Trinity Contest][NICE]

UVA	10109 [NICE][HARD-WORK]

</spoiler>

<spoiler summary="geometry">

http://www.spoj.com/problems/ADAPICK/

http://www.spoj.com/problems/ADAKOHL/

https://codeforces.com/gym/102307/problem/A (7) 

https://codeforces.com/contest/1199/problem/B (2) //[NICE][SIMPLE]

https://codeforces.com/gym/101991/problem/J (5)

https://codeforces.com/gym/101991/problem/B (4)

https://codeforces.com/gym/102006/problem/I (4) //[VERY NICE][ITERATIVE]

https://codeforces.com/gym/102021 [G] (8) //[3D]

https://codeforces.com/gym/102021 [B] (5) //Path on circle

https://codeforces.com/gym/102058/problem/K (3) //[BRUTE-FORCE][FAIL]

https://codeforces.com/gym/101972/problem/C (4) //[EASY][POINTS DISTANCE][IMAGE]

http://codeforces.com/gym/101628/problem/C (4) //Circles intersection

http://codeforces.com/gym/100112 [G] (4) //Special cases and so on - imple.

http://codeforces.com/gym/101982 [G] (3) //[DISTANCE]

http://codeforces.com/gym/101845/problem/D (5) //[VERY NICE][POLYGON][MO]

http://codeforces.com/gym/101962/problem/G (5) //Angles

http://codeforces.com/gym/101908/problem/K 

http://codeforces.com/gym/101879/problem/A (7) 

http://codeforces.com/gym/101873 [G] (4) //Pick's Theorem

http://codeforces.com/gym/101873 [A] (6) //heavy implementation

http://codeforces.com/gym/101808/problem/E (5) 

http://codeforces.com/gym/101808/problem/A (2) 

http://codeforces.com/gym/101666 [A] (4) 

http://codeforces.com/gym/101726/problem/J (5) //[NICE][INTERSECTION][DS]

http://codeforces.com/gym/101650 [F] (6) //Polygons + circles

http://codeforces.com/gym/101650 [H] (2) //A few if's

http://codeforces.com/contest/908/problem/C (3)

http://codeforces.com/contest/140/problem/A (3) //Circles around bigger circle

http://codeforces.com/contest/136/problem/D (4) //+Brute-Force

http://codeforces.com/contest/127/problem/A (1) //Points distance

http://codeforces.com/gym/101597/problem/B (3) //Simply  brute-force just the closest to points

http://codeforces.com/contest/70/problem/D (5) //Dynamic Convex Hull

https://icpc.kattis.com/problems/airport //Proposed by [user:tautsjasiunsas]

https://www.hackerrank.com/contests/world-codesprint-7/challenges/elastic-rope/problem

https://devskill.com/CodingProblems/ViewProblem/20 [EASY]

UVA	10321 //Polygon intersection

UVA	11265 //Polygon point +/-

UVA	13112 //Polygon

10907 UVA [Area of polygon from a point]

3378 &mdash; Swamp Things [LA] &mdash; Maximum points on line

UVA	11768 //Discrete points

2542 [LA] //Arc size [formula]

UVA	1571 //As below [easier]

https://www.codechef.com/problems/ALLPOLY //[NICE] Point seeing polygon

http://www.spoj.com/problems/IITKWPCL/ //Point distance

UVA	11281 //circle~triangle

UVA	12921 //circle reconstruction

UVA	190 //circle from 3 points

UVA	12240 //pts>circle

UVA	438 //circle pt

LightOJ	1018 //Minimum # of lines through all pts [VERY NICE]

UVA	11008 //Similar as above

UVA	12830 //Biggest rectangle without points inside

UVA	11012 //Most distant points

UVA	1683 //Closest points

UVA	12389 //3D MH Closest Points

http://www.spoj.com/problems/AMR12C/ //Pt closest to all other points

http://www.spoj.com/problems/CLOPPAIR/ //Closest pair of points

UVA	10678 //Circles intersection

http://codeforces.com/problemset/problem/600/D //Circles intersection

LightOJ	1118 //Circles intersection

http://www.spoj.com/problems/CERC07C/en/ //Bounding circle

UVA-10005 //Bounding circle

2407 [LA] //Bounding Sphere

LightOJ	1120 //Rectangle's Union

LightOJ	1130 //Circle x Rectangle intersection

UVA	11177 //Circle x Convex Polygon

http://codeforces.com/problemset/problem/610/D //Lines intersections (axes parallel)

6263 [LA] //Pt in areas

LightOJ	1058 //# parallelograma

UVA	12931 //Common area of polygons

UVA	10301 //Intersecting circles

UVA	453 //Circles intersection

http://codeforces.com/problemset/problem/681/E //Circles intersection

UVA	920 //Lines intersecion (etc..)

UVA	12556

http://codeforces.com/problemset/problem/793/C //Intersection ans similar

UVA	11343 //Intersection of segments

UVA	866 //Intersection of segments

Gym	100190I [2011 ACM-ICPC East Central North America (ECNA 2011)] //Segment intersection

http://codeforces.com/gym/100917/problem/K

UVA	11686 //Segment intersection

LightOJ	1388

UVA	833 //Segment intersection

LightOJ	1196 //Points sides

UVA	10167 //Points sides

UVA	12818 //Arc & Point distance

http://www.spoj.com/problems/SICRANO/ //Point-line distance

http://codeforces.com/problemset/problem/614/C //Point-line distance

UVA	13117 //Point-line distance

UVA	12483 //Point-line distance

UVA	12173  //Point-line distance

UVA	10075 //Point distance on sphere

https://www.hackerrank.com/contests/booking-hackathon/challenges/nearby-attractions/problem //Pt sphr

UVA	535 //Point distance on sphere

UVA	10897 //Sphere tavelling

UVA	11817 //Sphere travelling

UVA	10316 //Sphere travelling

UVA	1469 //Fractions distance 3D

11930 

12173 UVA 3

12194 UVA 4

11894 UVA 3

11769 UVA 7

11665 UVA 5

11509 UVA 4

11355 UVA 5

11265 UVA 6 //Nice one | polygon &mdash; cut/pt-check/area

11123 UVA 4 //Counting trapezoids

11177 UVA 6 //BS+Polygon/Circle intersection

11186 UVA 3 

11008 UVA 5 //with DP → #intersected triangles

11012 UVA 5 //Nejvzdálenější body (Manhatton 3D)

11072 UVA 4 //Points v poly gonu

http://codeforces.com/problemset/problem/682/E 6 (biggest triangle)

http://codeforces.com/contest/672/problem/C 4 //easy &mdash; just think it up

http://codeforces.com/contest/667/problem/A 2 //vzorecky

http://codeforces.com/contest/793/problem/C 5 //EASY but beware of epsilons (NICE)

http://codeforces.com/contest/794/problem/B 2 //Can be done with BS

http://codeforces.com/contest/814/problem/D 5 //+DP on trees (NICE &mdash; but low geom.)

10750 UVA 3 //Closest points &mdash; try all pairs

http://codeforces.com/contest/820/problem/B 3 //Polygon angle find!

13213 UVA 5 //VERY NICE &mdash; Voronoi diagram (low constraints so not actually needed)

13215 UVA 3 //EASY &mdash; Sum areas and find side lengths

http://www.spoj.com/problems/IITKWPCC/ (5) //VERY VERY NICE &mdash; Nqrt(N)log(N)

http://www.spoj.com/problems/NNS/ (5) Closest points query [fake geometry] {__128}[NICE]

http://codeforces.com/contest/849/problem/B (3) //X-Product &mdash; side

http://www.spoj.com/problems/AMR12C/ (5) //Point closest to all other points (with speed)

http://www.spoj.com/problems/SICRANO/ (3) //Line-Point distance

http://www.spoj.com/problems/V